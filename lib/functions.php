<?phpfunction getBackupFileName(){    $backupName = date('Y-m-d-H-i-s') . '_' . get_bloginfo('name', 'display');    $backupName = substr(str_replace(' ', '', $backupName), 0, 40);    $backupName = sanitize_file_name($backupName);    return $backupName;}function wpCloneSafePathMode($path){    return str_replace("\\", "/", $path);}function wpCloneDirectory($path){    return rtrim(str_replace("//", "/", wpCloneSafePathMode($path)), '/') . '/';}function convertPathIntoUrl($path){    return str_replace(rtrim(WPCLONE_ROOT, "/\\"), site_url(), $path);}function convertUrlIntoPath($url){    return str_replace(site_url(), rtrim(WPCLONE_ROOT, "/\\"), $url);}function wpBackupFullCopy($source, $target){    if (is_readable($source)) {        if (is_dir($source)) {            if (!strstr(wpCloneSafePathMode($source), rtrim(WPCLONE_DIR_BACKUP, "/\\"))) {                if (!file_exists($target)) {                    mkdir($target, WPBACKUP_FILE_PERMISSION);                }                $d = dir($source);                while (FALSE !== ($entry = $d->read())) {                    if ($entry == '.' || $entry == '..') {                        continue;                    }                    $Entry = "{$source}/{$entry}";                    if (is_dir($Entry)) {                        wpBackupFullCopy($Entry, $target . '/' . $entry);                    } else {                        @ copy($Entry, $target . '/' . $entry);                    }                }                $d->close();            }        } else {            copy($source, $target);        }    }}function CreateDb($destination){    global $wpdb;    $WPCLONE_DB_ICONV_IN = "UTF-8";    $WPCLONE_DB_ICONV_OUT = "ISO-8859-1//TRANSLIT";    $return = '';    // Get all of the tables    $tables = $wpdb->get_col('SHOW TABLES');    // Cycle through each provided table    foreach ($tables as $table) {        // First part of the output � remove the table        $result = $wpdb->get_results("SELECT * FROM {$table}", ARRAY_N);        $numberOfFields = count($result[0]);        $numberOfItems = count($result);        // Second part of the output � create table        $row2 = $wpdb->get_row("SHOW CREATE TABLE {$table}", ARRAY_N);        $return .= "\n\n" . $row2[1] . ";\n\n";        // Third part of the output � insert values into new table        for ($currentRowNumber = 0; $currentRowNumber < $numberOfItems; $currentRowNumber++) {            $row = $result[$currentRowNumber];            $query = "INSERT INTO {$table} VALUES(";            for ($j = 0; $j < $numberOfFields; $j++) {                $row[$j] = iconv($WPCLONE_DB_ICONV_IN, $WPCLONE_DB_ICONV_OUT, $row[$j]);                $query .= (empty($row[$j])) ? '"", ' : '"' . mysql_real_escape_string($row[$j]) . '", ';            }            $return .= substr($query, 0, -2) .  ");\n";        }        $return .= "\n";    }    // Generate the filename for the sql file    $File_open = fopen($destination . '/database.sql', 'w+');    // Save the sql file    fwrite($File_open, $return);    //file close    fclose($File_open);    $wpdb->flush();}function InsertData($name, $size, $pluginName){    global $wpdb;    global $current_user;    $wpdb->insert($wpdb->prefix . "wp_clone", array(        'backup_name' => $name,        'installer_name' => $pluginName,        'data_time' => current_time('mysql', get_option('gmt_offset')),        'creator' => $current_user->user_login,        'backup_size' => $size)    );    $wpdb->flush;}function CreateWPFullBackupZip($backupName){    $folderToBeZipped = WPCLONE_DIR_BACKUP . $backupName;    $destinationPath = $folderToBeZipped . '/' . basename(WPCLONE_WP_CONTENT);    $zipFileName = $backupName . '.zip';    DirectoryTree::createDirectory($destinationPath);    wpBackupFullCopy(rtrim(WPCLONE_WP_CONTENT, "/\\"), $destinationPath);    wpBackupFullCopy(WPCLONE_ROOT . 'wp-config.php', $folderToBeZipped . '/wp-config.php');    CreateDb($folderToBeZipped);    new WPbackupZip("{$folderToBeZipped}.zip", $folderToBeZipped, '.svn');    $zipSize = filesize("{$folderToBeZipped}.zip");    DirectoryTree::DeleteAllDirectoryFiles($folderToBeZipped, true);    return array($zipFileName, $zipSize);}function CreateWPCustomBackupZip($backupName, $directoryFiles){    $backupDirectory = rtrim(WPCLONE_DIR_BACKUP, "/\\");    $key = array_search($backupDirectory, $directoryFiles);    if ($directoryFiles[$key] === $backupDirectory) {        unset($directoryFiles[$key]);    }    $destinationPath = WPCLONE_DIR_BACKUP . $backupName;    $zipFileName = $backupName . '.zip';    mkdir($destinationPath, WPBACKUP_FILE_PERMISSION);    foreach($directoryFiles AS $directoryFolder) {        $destinationFolder = str_replace(rtrim(WPCLONE_ROOT, "/\\"), $destinationPath, $directoryFolder);        wpBackupFullCopy($directoryFolder, $destinationFolder);    }    CreateDb($destinationPath);    new WPbackupZip("{$destinationPath}.zip", $destinationPath, '.svn');    $zipSize = filesize("{$destinationPath}.zip");    DirectoryTree::DeleteAllDirectoryFiles($destinationPath, true);    return array($zipFileName, $zipSize);}function CreateWPClonePluginBackupZip($backupName, $zipFileName){    $installerBackupFile = "{$backupName}_wpclone";    $installerBackupPath = WPCLONE_DIR_BACKUP . $installerBackupFile;    $installerBackupFileZip = $installerBackupFile . '.zip';    wpBackupFullCopy(rtrim(WPCLONE_INSTALLER_PATH, "/\\"), $installerBackupPath);    $editBackupFilePath = $installerBackupPath . "/lib/file";    $backupZipPath = convertPathIntoUrl(WPCLONE_DIR_BACKUP . $zipFileName);    if (file_exists($editBackupFilePath)) {        $search = 'class="Url" value=""';        $replace = 'class="Url" value="' . $backupZipPath . '"';        chdir($editBackupFilePath);        DirectoryTree::openFileSearchAndReplace($editBackupFilePath, $search, $replace);        !file_exists($installerBackupPath . '/lib/view.php') || unlink($installerBackupPath . '/lib/view.php');        $copyFrom = $editBackupFilePath . '/view.php';        $copyTo = $installerBackupPath . '/lib/view.php';        DirectoryTree::CopyDirectory($copyFrom, $copyTo);    }    new WPbackupZip("{$installerBackupPath}.zip", $installerBackupPath, '.svn');    DirectoryTree::DeleteAllDirectoryFiles($installerBackupPath, true);    return $installerBackupFileZip;}function unzipBackupFile($zipFilename, $destinationFolder){    $zipFileObject = new ZipArchive;    $response = true;    if ($zipFileObject->open($zipFilename) === TRUE) {        $zipFileObject->extractTo($destinationFolder);        /* Remove htaccess file from directory. */        $folder = pathinfo($zipFilename, PATHINFO_FILENAME);        $htaccess = wpCloneSafePathMode($destinationFolder . $folder) . '/.htaccess';        !(file_exists($htaccess)) || unlink($htaccess);    } else {        $response = false;    }    unset($zipFileObject);    return $response;}function DeleteWPBackupZip($nm){    global $wpdb;    $wp_backup = "{$wpdb->prefix}wp_clone";    $deleteRow = $wpdb->get_row("SELECT * FROM {$wp_backup} WHERE id = '{$nm}'");    $wpdb->query("DELETE FROM {$wp_backup} WHERE id = '{$nm}' ");    unlink(WPCLONE_DIR_BACKUP . $deleteRow->backup_name) or die('not deleted backup');    unlink(WPCLONE_DIR_BACKUP . $deleteRow->installer_name) or die('not deleted plugin');    return $deleteRow;}function bytesToSize($bytes, $precision = 2){    $kilobyte = 1024;    $megabyte = $kilobyte * 1024;    $gigabyte = $megabyte * 1024;    $terabyte = $gigabyte * 1024;    if (($bytes >= 0) && ($bytes < $kilobyte)) {        return $bytes . ' B';    } elseif (($bytes >= $kilobyte) && ($bytes < $megabyte)) {        return round($bytes / $kilobyte, $precision) . ' KB';    } elseif (($bytes >= $megabyte) && ($bytes < $gigabyte)) {        return round($bytes / $megabyte, $precision) . ' MB';    } elseif (($bytes >= $gigabyte) && ($bytes < $terabyte)) {        return round($bytes / $gigabyte, $precision) . ' GB';    } elseif ($bytes >= $terabyte) {        return round($bytes / $terabyte, $precision) . ' TB';    } else {        return $bytes . ' B';    }}function remove_extension($name){    $ext = strrchr($name, '.');    if ($ext !== false) {        $name = substr($name, 0, -strlen($ext));    }    return $name;}if (!function_exists('file_put_contents')){    function file_put_contents($filename, $data)    {        $f = @fopen($filename, 'w');        if (!$f) {            return false;        } else {            $bytes = fwrite($f, $data);            fclose($f);            return $bytes;        }    }}/** Returns the contents of file name passed * * @param string $filename * @return string */function get_file_contents($filename){    if (!function_exists('file_get_contents')) {        $handle = fopen($filename, "r");        $contents = fread($handle, filesize($filename));        fclose($handle);    } else {        $contents = file_get_contents($filename);    }    return $contents;}function getDbInfo(){    $dbInfo = array();    $dbInfo["dbhost"] = DB_HOST;    $dbInfo["dbname"] = DB_NAME;    $dbInfo["dbuser"] = DB_USER;    $dbInfo["dbpassword"] = DB_PASSWORD;    return $dbInfo;}function getNumberOfTablesInDatabase($databaseName, $dbConn = null){    $selectQuery = "SELECT COUNT(*) AS number_of_tables                    FROM information_schema.tables                    WHERE table_schema = '{$databaseName}'";    $numOfTables = mysql_query($selectQuery, $dbConn);    $numOfTables = mysql_fetch_assoc($numOfTables);    return $numOfTables;}function replaceTablePrefixInConfigFile($currentConfigFile, $configInZipFile){    $backupFileVariables = getVariablesFromFile($configInZipFile);    $backupPrefix = $backupFileVariables["table_prefix"];    replaceTablePrefix($currentConfigFile, $backupPrefix);    return $backupPrefix;}function getVariablesFromFile($filename){    ob_start();    include($filename);    ob_end_clean();    return get_defined_vars();}function replaceTablePrefix($filename, $newPrefix){    $fileContent = file_get_contents($filename);    $pos = strpos($fileContent, '$table_prefix');    $str = substr($fileContent, $pos, strpos($fileContent, PHP_EOL, $pos) - $pos);    $fileContent = str_replace($str, '$table_prefix = "' . $newPrefix . '";', $fileContent);    file_put_contents($filename, $fileContent);}function replaceSiteUrlFromDatabaseFile($databaseFile, $currentSiteUrl){    $fileContent = file_get_contents($databaseFile, true);    $pos = strpos($fileContent, 'siteurl') + 8;    $urlStartPos = strpos($fileContent, '"', $pos) + 1;    $urlEndPos = strpos($fileContent, '"', $urlStartPos);    $backupSiteUrl = substr($fileContent, $urlStartPos, $urlEndPos - $urlStartPos);    $fileContent = str_replace($backupSiteUrl, $currentSiteUrl, $fileContent);    file_put_contents($databaseFile, $fileContent);    return $backupSiteUrl;}function processConfigAndDatabaseFile($configFileInZip, $databaseFileInZip){    $currentSiteUrl = site_url();    if (file_exists($configFileInZip)) {        /* Replacing current table prefix with of the backup one. */        $currentConfigFile = wpCloneSafePathMode(WPCLONE_ROOT . "wp-config.php");        $backupPrefix = replaceTablePrefixInConfigFile($currentConfigFile, $configFileInZip);        /* Replacing backup site url with the current one. */        $backupSiteUrl = replaceSiteUrlFromDatabaseFile($databaseFileInZip, $currentSiteUrl);        $dbInfo = getDbInfo();        $conn = mysql_connect($dbInfo['dbhost'], $dbInfo['dbuser'], $dbInfo['dbpassword']);        mysql_select_db($dbInfo['dbname'], $conn) or die(mysql_error());        $query = mysql_query("SHOW TABLES", $conn);        while (($fetch = mysql_fetch_array($query))) {            mysql_query("Drop table `{$fetch[0]}`") or die(mysql_error() . '<br> Acess denied');        }        $dbFileContent = file_get_contents($databaseFileInZip);        $dbFileContent = str_ireplace("\xA0", " ", $dbFileContent);        $res = explode(";\n", $dbFileContent);        flush();        foreach ($res AS $query) {            mysql_query($query, $conn);        }        $wpOptions = $backupPrefix . 'options';        mysql_query("UPDATE {$wpOptions} SET `option_value`='{$currentSiteUrl}' WHERE `option_name`='home'");        mysql_query("UPDATE {$wpOptions} SET `option_value`='{$currentSiteUrl}' WHERE `option_name`='siteurl'");        $res = mysql_query("SELECT `option_value` FROM {$wpOptions} WHERE `option_name`='dashboard_widget_options'") or die(mysql_error());        $data = mysql_fetch_assoc($res) or die(mysql_error());        $replace = str_replace($backupSiteUrl, $currentSiteUrl, $data['option_value']);        mysql_query("Update {$wpOptions} SET `option_value`='{$replace}' WHERE `option_name`='dashboard_widget_options'");        mysql_close($conn);        unlink($configFileInZip);    }    return $currentSiteUrl;}